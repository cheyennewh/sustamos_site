---
editor_options: 
  markdown: 
    wrap: 72
---
# Whole-Data Analyses - Delay

This section includes analyses of sustained attention, recognition memory, and affective rating data from the encoding and retrieval components of the 'delay' version of the experiment described in 'Experiments'. All participants from the sample were included in the following analyses. For analyses split by task performance or memory accuracy, see the 'populations' tab.


```{r , include=FALSE}
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#rm(list = ls())
#load libraries
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(tidyverse)
library(hrbrthemes)
#library(viridis)
library(kableExtra)
library(dplyr)
library(viridis)
library(lme4)
library(ggpubr)
library(patchwork)
library(sjPlot)

```


```{r,message=F,warning=F}

delay_sust1 <- read_csv("./delay_data/delay_batch1/sust1.csv")
delay_sust2 <- read_csv("./delay_data/delay_batch1/sust2.csv")
delay_sust3 <- read_csv("./data_delay_0911/sust1.csv")
delay_sust4 <- read_csv("./data_delay_0911/sust2.csv")
delay_sust5 <- read_csv("./delay_data_0919/sust1.csv")
delay_sust6 <- read_csv("./delay_data_0919/sust2.csv")
delay_sust7 <- read_csv("./data_delay_0926/sust1.csv")
delay_sust8 <- read_csv("./data_delay_0926/sust2.csv")
delay_sust9 <- read_csv("./delay_data1010/sust1.csv")
delay_sust10 <- read_csv("./delay_data1010/sust2.csv")

delay_sust11 <- read_csv("./delay_data_1018/sust1.csv")
delay_sust12 <- read_csv("./delay_data_1018/sust2.csv")
delay_sust13 <- read_csv("./data_delay_1101/sust1.csv")
delay_sust14 <- read_csv("./data_delay_1101/sust2.csv")

delay_mem1 <- read_csv("./delay_data/delay_batch1/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem2 <- read_csv("./delay_data/delay_batch1/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem3 <- read_csv("./data_delay_0911/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem4 <- read_csv("./data_delay_0911/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem5 <- read_csv("./delay_data_0919/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem6 <- read_csv("./delay_data_0919/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem7 <- read_csv("./data_delay_0926/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem8 <- read_csv("./data_delay_0926/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem9 <- read_csv("./delay_data1010/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem10 <- read_csv("./delay_data1010/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem11 <- read_csv("./delay_data_1018/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem12 <- read_csv("./delay_data_1018/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem13 <- read_csv("./data_delay_1101/mem1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_mem14 <- read_csv("./data_delay_1101/mem2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))


delay_mem_early2 <- read_csv("./delay_data/mem2_early.csv")

delay_emo1 <-read_csv("./delay_data/delay_batch1/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo2 <-read_csv("./delay_data/delay_batch1/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo3 <-read_csv("./data_delay_0911/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo4 <-read_csv("./data_delay_0911/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo5 <-read_csv("./delay_data_0919/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo6 <-read_csv("./delay_data_0919/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo7 <-read_csv("./data_delay_0926/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo8 <-read_csv("./data_delay_0926/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo9 <-read_csv("./delay_data1010/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo10 <-read_csv("./delay_data1010/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo11 <-read_csv("./delay_data_1018/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo12 <-read_csv("./delay_data_1018/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo13 <-read_csv("./data_delay_1101/emo1.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))
delay_emo14 <-read_csv("./data_delay_1101/emo2.csv")%>%
  select(-c("branch-ck1c","randomiser-8rl3","branch-tpdd"))

delay_emo_early2 <- read_csv("./delay_data/emo2_early.csv")


#valence <- emo[emo$aff_type=="valence",]
#arousal <- emo[emo$aff_type=="arousal",]
#emo_mematt <- merge(emo, mem_att, by= c("`Participant Private ID`","Img"))

delay_sust <- rbind(delay_sust1,delay_sust2,delay_sust3,delay_sust4,delay_sust5,delay_sust6,delay_sust7,delay_sust8,delay_sust9,delay_sust10,delay_sust11,delay_sust12,delay_sust13,delay_sust14)%>%
  filter(`Participant Private ID` !="11638973" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682065" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11758423" &`Participant Private ID` !="11638956" &`Participant Private ID` !="11682066" &`Participant Private ID` !="11852272" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11716965" &`Participant Private ID` !="11852271" &`Participant Private ID` !="11852272"  &`Participant Private ID` !="11658184"&`Participant Private ID` !=" 11639011")
delay_memory <- rbind(delay_mem1,delay_mem2,delay_mem_early2,delay_mem3,delay_mem4,delay_mem5,delay_mem6,delay_mem7,delay_mem8,delay_mem9,delay_mem10,delay_mem11,delay_mem12,delay_mem13,delay_mem14)%>%
  filter(`Participant Private ID` !="11638973" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682065" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11758423" &`Participant Private ID` !="11638956" &`Participant Private ID` !="11682066" &`Participant Private ID` !="11852272"&`Participant Private ID` !="11658165" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11716965" &`Participant Private ID` !="11852271" &`Participant Private ID` !="11852272" &`Participant Private ID` !="11658184"&`Participant Private ID` !=" 11639011")
delay_emo <- rbind(delay_emo1,delay_emo2,delay_emo3,delay_emo4,delay_emo5,delay_emo6,delay_emo7,delay_emo8,delay_emo_early2,delay_emo9,delay_emo10,delay_emo11,delay_emo12,delay_emo13,delay_emo14)%>%
  filter(`Participant Private ID` !="11638973" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682065" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11758423" &`Participant Private ID` !="11638956" &`Participant Private ID` !="11682066" &`Participant Private ID` !="11852272"&`Participant Private ID` !="11658165" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11716965" &`Participant Private ID` !="11852271" &`Participant Private ID` !="11852272" &`Participant Private ID` !="11658184"&`Participant Private ID` !=" 11639011")




## Filter out the first presentation of the target and only keep responses to the second
delay_unique_rows <- delay_sust%>%
  filter(`Spreadsheet: display`=="image")
# Filter rows to keep only those with 'F' if it exists, otherwise keep any row
delay_filtered_rows <- delay_unique_rows %>%
  group_by(`Trial Number`,`Participant Private ID`) %>%
  filter(!`Response Type`=="continue")%>%
  filter(if(any(Response == 'F', na.rm = TRUE)) Response == 'F' else TRUE) %>%
  slice(1)%>%
  ungroup()
delay_filtered_rows <- delay_filtered_rows %>%
  group_by(`Spreadsheet: img`, `Spreadsheet: type`, `Participant Private ID`) %>%
  mutate(num_rows = n())%>%
  filter(num_rows == 1 | row_number() == 2) %>%
  ungroup() %>%
  select(-num_rows)




delay_sust_full_all <- delay_filtered_rows%>%
  arrange(`Participant Private ID`, `Trial Number`)%>%
  mutate(Block_Number = NA,
         Reaction.Time = ifelse(`Response Type` == "timedOut", NA, `Reaction Time`)
  )

delay_sust_full_all <- delay_sust_full_all%>%
  group_by(`Participant Private ID`)%>%
  mutate(
    Fitted_Values = ifelse(!is.na(`Reaction.Time`), lm(`Reaction.Time` ~ `Trial Number`)$fitted.values, NA),
    Detrended_Reaction_Time = `Reaction.Time` - Fitted_Values)

delay_sust_full <-delay_sust_full_all %>%
  filter(!`Spreadsheet: type`=="filler")%>%
  mutate(Block_Number = rep(1:(n() %/% 4 + ifelse(n() %% 4 > 0, 1, 0)), each = 4)[1:n()],
         `Reaction Time` = ifelse(`Response Type` == "timedOut", NA, `Reaction.Time`)
  )



delay_sust_full_window_rt <- delay_sust_full %>%
  filter(`Spreadsheet: type` == 'window') %>%
  group_by(`Participant Private ID`)%>%
  ungroup()

delay_sust_full_window_rt <- delay_sust_full_window_rt %>%
  group_by(`Participant Private ID`,Block_Number)%>%
  mutate(Mean_Reaction_Time = mean(Detrended_Reaction_Time, na.rm = FALSE),
         Mean_Window_1 = mean(Detrended_Reaction_Time, na.rm = FALSE))%>%
  arrange(`Participant Private ID`, `Trial Number`)

delay_sust_full_target_rt <- delay_sust_full %>%
  group_by(`Participant Private ID`,Block_Number)%>%
  filter(`Spreadsheet: type` == 'target')



delay_sust_full_rt <- rbind(delay_sust_full_window_rt,delay_sust_full_target_rt)%>%
  ungroup()%>%
  group_by(`Participant Private ID`)%>%
  mutate(Mean_Window_Scale = scale(Mean_Window_1))%>%
  ungroup()

delay_sust_full_rt <-delay_sust_full_rt %>%
  arrange(`Participant Private ID`, `Trial Number`)%>%
  group_by(`Participant Private ID`,Block_Number)%>%
  mutate(
    Mean_Reaction_Time = ifelse(`Spreadsheet: type` == "target", mean(Mean_Reaction_Time[`Spreadsheet: type` == "window"]), Mean_Reaction_Time),
    Mean_Window_Scale = ifelse(`Spreadsheet: type` == "target", mean(Mean_Window_Scale[`Spreadsheet: type` == "window"]), Mean_Window_Scale)
  )%>%
  filter(
)


# View the resulting dataframe

#write.csv(sust_full_rt,"sust_full_rt.csv")


delay_emo <- delay_emo %>%
  select(`Participant Private ID`, Display, Response, `Spreadsheet: memory`, `Spreadsheet: img`, `Object ID`) %>%
  filter(`Participant Private ID` !="11638973" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682065" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11758423" )%>%
  filter(Display == "image",
         `Spreadsheet: memory` == "target") %>%
  mutate(Response=as.numeric(Response),
         aff_type = ifelse(`Object ID` == "object-51", "valence", 
                           ifelse(`Object ID` == "object-78", "arousal", NA)))%>%
  drop_na()%>%
  filter(Response>=1 & Response<=9)%>%
  rename("Img"="Spreadsheet: img",
         "emo_rate" = "Response")%>%
  group_by(`Participant Private ID`,Img,aff_type) %>%
  filter(row_number() == n() | n() == 1) %>%
  ungroup()%>%
  filter()


#write.csv(emo,"emo.csv")





delay_memory <- delay_memory %>%
  filter(Display=="image",
         Response>0,
         Response<7,
         !`Participant Private ID`=="9957478")%>%
  filter(`Participant Private ID` !="11638973" &`Participant Private ID` !="11658165" &`Participant Private ID` !="11682065" &`Participant Private ID` !="11682062" &`Participant Private ID` !="11758423" )%>%
  mutate(hits = ifelse(`Spreadsheet: memory` == "target" & (Response == 1 | Response == 2| Response == 3), 1, 0),
         fas = ifelse(`Spreadsheet: memory` == "filler" & (Response == 1 | Response == 2| Response == 3), 1, 0),
         miss = ifelse(`Spreadsheet: memory` == "target" & (Response == 6 |Response == 4 | Response == 5), 1, 0),
         crs = ifelse(`Spreadsheet: memory` == "filler" & (Response == 6 |Response == 4 | Response == 5), 1, 0))
delay_memory[] <- lapply(delay_memory, function(x) ifelse(x == "A", 1,
                                              ifelse(x == "B", 2,
                                                     ifelse(x == "C", 3,
                                                            ifelse(x == "D", 4,
                                                                   ifelse(x == "E", 5,
                                                                          ifelse(x == "F", 6, x)))))))
delay_memory <-delay_memory%>%
  group_by(`Participant Private ID`)%>%
  mutate(hit_rate = sum(hits) / (sum(hits)+sum(miss)),
         false_alarm_rate = sum(fas) / (sum(crs)+sum(fas)),
         APrime = ifelse(hit_rate >= false_alarm_rate, 
                         ((hit_rate - false_alarm_rate) * (1 + hit_rate - false_alarm_rate)) / (4 * hit_rate * (1 - false_alarm_rate)) + 0.5, 
                         0.5 - (false_alarm_rate - hit_rate) * (1 + false_alarm_rate - hit_rate) / (4 *false_alarm_rate * (1 - hit_rate))),
         d_prime = (qnorm(hit_rate) - qnorm(false_alarm_rate)) / sqrt(2)
         
  )%>%
  mutate(group=ifelse(`Spreadsheet: memory`=="target","group1","group2"))%>%
  filter()


#write.csv(memory, "memory.csv")
delay_vamos_aff_s1 <- read_csv("./VAMOS_Set_1_img_info.csv")
delay_vamos_aff_s2 <- read_csv("./NAPS_img_info.csv")


delay_valence <- delay_emo[delay_emo$aff_type=="valence",]
delay_vamos_aff <- rbind(delay_vamos_aff_s1,delay_vamos_aff_s2)
```


```{r ,message=F,warning=F}


delay_mem_only <- delay_memory%>%
  select(c(`Participant Private ID`,hits,fas,`Spreadsheet: img`,`Trial Number`,Response,`Spreadsheet: memory`,group))%>%
  filter(`Spreadsheet: memory`=="target")
delay_mem_only2 <- delay_memory%>%
  select(c(`Participant Private ID`,hits,fas,`Spreadsheet: img`,`Trial Number`,Response,`Spreadsheet: memory`,group))%>%
  filter(`Spreadsheet: memory`=="filler")

delay_att_only <- delay_sust_full_rt%>%
  select(c(`Participant Private ID`,Mean_Reaction_Time,Mean_Window_Scale,`Trial Number`,`Spreadsheet: img`,`Spreadsheet: type`))%>%
  ungroup()%>%
  unique()%>%
  filter(`Spreadsheet: type`== "target")

delay_mem_att <-merge(delay_mem_only,delay_att_only, by=c("Spreadsheet: img","Participant Private ID"))%>%
  unique()%>%
  select(-`Trial Number.y`)%>%
  rename(`Trial Number` = `Trial Number.x`)
delay_mem_att2 <-merge(delay_mem_only2,delay_att_only, by=c("Spreadsheet: img","Participant Private ID"))%>%
  unique()


delay_mem_att <- delay_mem_att %>%
  group_by(`Participant Private ID`) %>%
  mutate(zrt = scale(Mean_Reaction_Time))%>%
  rename('Img'= `Spreadsheet: img`)


delay_mem_only2 <- delay_mem_only2 %>%
  group_by(`Participant Private ID`) %>%
  rename('Img'= `Spreadsheet: img`)

delay_emo_mematt <- merge(delay_emo, delay_mem_att, by= c("Participant Private ID","Img"))
delay_valence_mematt <- delay_emo_mematt%>%
  filter(aff_type=="valence")

delay_arousal_mematt <-delay_emo_mematt%>%
  filter(aff_type=="arousal")

delay_mem_only_2 <- delay_mem_only%>%
  rename('Img' =`Spreadsheet: img`)

#vamos_aff <- rbind(vamos_aff_s1,vamos_aff_s2)


```



## How often were participants lapsing on the task?

During the go/no-go task (encoding task), participants should have withheld a response when they saw a second presentation of the target image. A lapse occurs when they accidentally make a key press on one of these no-go target images. There were 50 target images shown during this task for each participant, so the maximum number of lapses is 50. Scroll through the table to see how often each participant made this mistake. 

<div style="width: 100%; height: 300px; overflow-y: auto; display: flex; justify-content: center;">
  <div style="width: auto;">

```{r ,message=F,warning=F}

delay_rt_analysis <-delay_sust_full_rt%>%
  select(Mean_Reaction_Time,Mean_Window_Scale, Block_Number,`Spreadsheet: type`,Response, `Spreadsheet: img`,`Participant Private ID`)%>%
  group_by(Block_Number,`Participant Private ID`)%>%
  unique()%>%
  mutate(
    targ_perfs = ifelse(`Spreadsheet: type` == "target" & Response == "FALSE", "Lapse", "Correct"),
    Mean_Window_Scale = ifelse(`Spreadsheet: type` == "target", mean(Mean_Window_Scale[`Spreadsheet: type` == "window"]), Mean_Window_Scale)
  )%>%
  filter(`Spreadsheet: type` == "target")
delay_rt_analysis$NAs = is.na(delay_rt_analysis$targ_perfs)

delay_rt_analysis <- delay_rt_analysis%>%
  mutate(
    targ_perf = ifelse(`Spreadsheet: type` == "target" & NAs == "TRUE", "Correct", "Lapse")
  )%>%
  ungroup()%>%
  group_by(`Participant Private ID`)

delay_lapse_total <- summarise(delay_rt_analysis, `target errors` = sum(targ_perf == "Lapse"))
    


delay_rt_analysis2 <-delay_sust_full_all%>%
  select(`Reaction Time`,Block_Number,`Spreadsheet: type`,Response, `Spreadsheet: img`,`Participant Private ID`)%>%
  group_by(Block_Number,`Participant Private ID`)%>%
  unique()%>%
  filter(`Spreadsheet: type` == "window"|`Spreadsheet: type` == "filler")%>%
  mutate(
    fill_wind_perfs = ifelse(Response == "FALSE", "Correct", "Lapse")
  )%>%
  ungroup()%>%
  group_by(`Participant Private ID`)

delay_rt_analysis2$NAs = is.na(delay_rt_analysis2$fill_wind_perfs)

delay_rt_analysis2 <- delay_rt_analysis2%>%
  mutate(
    fill_wind_perf = ifelse(NAs == "TRUE", "Lapse", "Correct")
  )%>%
  ungroup()%>%
  group_by(`Participant Private ID`)

delay_lapse_total2 <- summarise(delay_rt_analysis2, `filler & window errors` = sum(fill_wind_perf == "Lapse"))


remove_fills <- delay_lapse_total2 %>%
  filter(`filler & window errors` <mean(delay_lapse_total2$`filler & window errors`) + (2* sd(delay_lapse_total2$`filler & window errors`)))

remove_targs <- delay_lapse_total %>%
  filter(`target errors` <25)







    
 delay_laps_tot2<- merge(remove_targs,remove_fills)
 delay_laps_tot3 <- delay_laps_tot2 %>%
  kable("html") %>%
  kable_styling(full_width = FALSE)%>%
  scroll_box(width="400px",height = "300px") 
delay_laps_tot3

delay_mem_att <- delay_mem_att%>%
  filter(`Participant Private ID` %in% delay_laps_tot2$`Participant Private ID`)


```

</div>
</div>


## Does pretrial reaction time predict lapses?

The average reaction times (RTs) were linearly detrended within participant, mean reaction times were then calculated for the 3 images prior to a target (pretrial RT). In the below plot, I compare the preceding window RT for target images when the participant correctly withheld a response (correct) and when they lapsed during this task. We would expect that reaction times for the correct condition would be slower than for the lapse condition. This would indicate that participants are reacting habitually vs. reactively to the images when they lapse.


From this comparison, we see that, in general, reaction time IS slower for the correct vs. lapse conditions, which is in line with prior findings.


```{r, warning=FALSE,message=FALSE}

delay_unique_ids <- unique(delay_rt_analysis$`Participant Private ID`)
# Get unique Participant IDs for Correct and Lapse performances
delay_unique_ids_correct <- unique(delay_rt_analysis$`Participant Private ID`[delay_rt_analysis$targ_perf == "Correct"])
delay_unique_ids_lapse <- unique(delay_rt_analysis$`Participant Private ID`[delay_rt_analysis$targ_perf == "Lapse"])

# Get a union of all unique Participant IDs
delay_all_unique_ids <- union(delay_unique_ids_correct, delay_unique_ids_lapse)

# Calculate means for Correct performance
delay_means_by_participant <- tapply(
  delay_rt_analysis$Mean_Window_Scale[delay_rt_analysis$targ_perf == "Correct"],
  delay_rt_analysis$`Participant Private ID`[delay_rt_analysis$targ_perf == "Correct"],
  mean,
  na.rm=TRUE
)

# Calculate means for Lapse performance
delay_means_by_participant2 <- tapply(
  delay_rt_analysis$Mean_Window_Scale[delay_rt_analysis$targ_perf == "Lapse"],
  delay_rt_analysis$`Participant Private ID`[delay_rt_analysis$targ_perf == "Lapse"],
  mean,
  na.rm=TRUE
)

# Initialize vectors to store means for all unique Participant IDs
delay_means_all_correct <- rep(0, length(delay_all_unique_ids))
delay_means_all_lapse <- rep(0, length(delay_all_unique_ids))

# Replace means for Correct performance with calculated means
delay_means_all_correct[match(names(delay_means_by_participant), delay_all_unique_ids)] <- unname(delay_means_by_participant)

# Replace means for Lapse performance with calculated means
delay_means_all_lapse[match(names(delay_means_by_participant2), delay_all_unique_ids)] <- unname(delay_means_by_participant2)

# Convert the result to a data frame
delay_laps_tot <- data.frame(
  `Participant Private ID` = delay_all_unique_ids,
  `Correct` = delay_means_all_correct,
  `Lapse` = delay_means_all_lapse
)

delay_lapse_df <- gather(delay_laps_tot, key = "Condition", value = "Mean_Window_Scale", -"Participant.Private.ID")

ggplot(delay_lapse_df, aes(x = Condition, y = Mean_Window_Scale, group = `Participant.Private.ID`)) +
  geom_point(aes(color = factor(`Participant.Private.ID`)), size = 3) +
  geom_line(aes(color = factor(`Participant.Private.ID`)), size = 1) +
  scale_color_viridis(discrete="True", option="A")+
  theme_minimal() +
  xlab("Target Response") +
  ylab(" Mean Window Reaction Time") +
  labs(color = "Participant")+
  theme(legend.position = "none")
```

## Is memory above chance?


During the retrieval task, participants were asked to rate their memory of target images (and 50 memory lures) on a scale of 1 (sure old) - 6 (sure new). To ensure data quality for the later analyses which included participant memory data, I first checked that each participant's memory was above chance.

```{r , warning=FALSE,message=FALSE}

delay_random_hit_rate <-0.3
delay_random_fa_rate<-0.3

delay_chance_d_prime <- (qnorm(delay_random_hit_rate) - qnorm(delay_random_fa_rate))/ sqrt(2)

ggplot(delay_memory,aes(x=as.character(`Participant Private ID`),y=APrime,color =as.factor( `Participant Private ID`)))+
  geom_point()+
  geom_hline(yintercept = 0.50, color="red")+
  ylim(0,1)+
  theme_ipsum(axis_title_just = "cc",axis_title_size = 12,axis_text_size = 9)+
  xlab("Participant")+
  ylab("A'")+
  scale_color_viridis(option="A",discrete="True")+
  labs(color = "Participant",
       title="Memory performance (Inclusive)")+
  theme(legend.position="none",axis.text.x = element_blank())


# Assuming 'memory' is your data frame
delay_memory2 <- delay_memory %>%
  group_by(`Participant Private ID`) %>%
  summarise(total_hits = sum(hits, na.rm = TRUE),
            total_miss = sum(miss, na.rm = TRUE),
            total_fas = sum(fas, na.rm = TRUE), 
            total_crs = sum(crs, na.rm = TRUE))
delay_memory_unique <- delay_memory%>%
  select(APrime,d_prime,`Participant Private ID`)%>%
  unique()





```

<br>
I also took a look at the distributions of memory performance, using both d' and A'prime' as measures of performance. In both cases, it's apparent that there are a ton of participants that are hovering just above chance. In the 'populations' section of this bookdown, I explore whether these 'worse memory' participants (under median) produce significantly different results than the 'better memory' participants.

<details>
  <summary> Memory Performance Plots </summary>

```{r, message=FALSE, warning=FALSE}
library(ggpubr)
ggplot()+
geom_histogram(delay_memory_unique, mapping=aes(x=APrime),fill="tomato1",alpha=.7)+
  theme_minimal() +
  ylab("Number of participants")

 ggplot()+
geom_histogram(delay_memory_unique, mapping=aes(x=d_prime),fill="firebrick4",alpha=.7)+
  theme_minimal()+
  ylab("Number of participants")



delay_poor_mems <- delay_memory_unique$`Participant Private ID`[delay_memory_unique$APrime<0.7076572]
delay_good_mems <- delay_memory_unique$`Participant Private ID`[delay_memory_unique$APrime>=0.7076572]

delay_mem_fails <- delay_memory_unique$`Participant Private ID`[delay_memory_unique$APrime<.5]

```
</details>


## How does pretrial reaction time relate to memory after a 24 hr delay?
```{r,message=F,warning=F}

delay_cross_mem_predict <- merge(delay_vamos_aff,delay_mem_only_2, by="Img")


delay_vamos_aff_use <- delay_vamos_aff[c(1,3,5,6),]
delay_mem_att <-merge(delay_mem_att,delay_vamos_aff, by="Img")%>%
  ungroup()%>%
  mutate(zv = scale(Mean_Valence),
         za = scale(Mean_Arousal))%>%
  mutate(z_mem = scale(Memorability_Score))

delay_mem_only2 <-merge(delay_mem_only2,delay_vamos_aff, by="Img")%>%
  ungroup()%>%
  mutate(zv = scale(Mean_Valence),
         za = scale(Mean_Arousal))%>%
  mutate(z_mem = scale(Memorability_Score))




delay_mem_att$`Participant Private ID` <- as.factor(delay_mem_att$`Participant Private ID`)
delay_mem_att <- delay_mem_att%>%
  filter(!`Participant Private ID` %in% delay_mem_fails)


# Fit the GLMM model
delay_model2 <- glmer(hits ~ zrt + (1 +zrt| `Participant Private ID`), family = binomial, data = delay_mem_att)

delay_mem_att_clean <- delay_mem_att %>%
  filter(!is.na(zrt) & !is.na(hits))

# Create a data frame with predictions
delay_pred_data2 <- delay_mem_att_clean %>%
  # Create a new data frame for prediction with original values
  mutate(
    pred = predict(delay_model2, type = "response"),
    se = predict(delay_model2, type = "link", se.fit = TRUE)$se.fit
  )

# Calculate confidence intervals
delay_pred_data2 <- delay_pred_data2 %>%
  mutate(
    lwr = pred - 1.96 * se,
    upr = pred + 1.96 * se
  )

```

```{r, include=F}
ggplot(delay_pred_data2, aes(x = zrt, y = hits)) +
  geom_point(alpha=.4) +
  geom_line(aes(y = pred, color = as.factor(`Participant Private ID`))) + 
  geom_smooth(aes(y = pred), method = "lm",color = "black") + # Predicted line
  theme_ipsum(axis_title_just = "cc", axis_title_size = 12, axis_text_size = 9) +
  ylim(0, 1) +
  xlab("Pretrial RT") +
  ylab("HIT?") +
  labs(color = "Participant") +
  theme(legend.position = "none")+
  scale_color_viridis(option="A",discrete="True")+
  ggtitle("Random Intercept+ slopes")

```


```{r,message=F,warning=F }
library(sjPlot)
model_summary <- summary(delay_model2)

fixed_effects_table <- model_summary$coefficients

fixed_effects_table
```



<br>
<br>

## How does memorability relate to memory after a 24 hr delay?
```{r,message=F,warning=F}

delay_mem_att_unique <- delay_mem_att%>%
  select(`Participant Private ID`,za,hits,z_mem)%>%
  unique()

delay_model3 <- glmer(hits ~ z_mem + (1+z_mem| `Participant Private ID`), family = binomial, data = delay_mem_att_unique,control = glmerControl())
delay_mem_att_clean3 <- delay_mem_att %>%
  filter(!is.na(z_mem) & !is.na(hits))
# Create a data frame with predictions
delay_pred_data3 <- delay_mem_att_clean3 %>%
  # Create a new data frame for prediction with original values
  mutate(
    pred = predict(delay_model3, type = "response"),
    se = predict(delay_model3, type = "link", se.fit = TRUE)$se.fit
  )

# Calculate confidence intervals
delay_pred_data3 <- delay_pred_data3 %>%
  mutate(
    lwr = pred - 1.96 * se,
    upr = pred + 1.96 * se
  )
```

```{r }
ggplot(delay_pred_data3, aes(x = z_mem, y = hits)) +
  geom_point() +
  geom_line(aes(y = pred, color = as.factor(`Participant Private ID`))) + 
  geom_smooth(aes(y = pred), method= "lm",color = "black") + # Predicted line 
  theme_ipsum(axis_title_just = "cc", axis_title_size = 12, axis_text_size = 9) +
  ylim(0, 1) +
  xlab("Memorability") +
  ylab("HIT?") +
  labs(color = "Participant") +
  theme(legend.position = "none")+
  scale_color_viridis(option="A",discrete="True")
#tab_model(model2, show.ci = FALSE,show.re.var=FALSE,show.icc=FALSE,show.obs=FALSE)


```

```{r,message=F,warning=F}
model_summary <- summary(delay_model3)

fixed_effects_table <- model_summary$coefficients

fixed_effects_table
```

<br>
<br>

## How does valence relate to memory after a 24 hr delay?

```{r,message=F,warning=F}

delay_ind_scale_emo <- delay_emo_mematt%>%
  select(`Participant Private ID`,Img,emo_rate,aff_type,hits,Response,group,zrt)%>%
  group_by(`Participant Private ID`,aff_type)%>%
  mutate(z_ind = scale(emo_rate))%>%
  ungroup()

delay_ind_scale_val <-delay_ind_scale_emo[delay_ind_scale_emo$aff_type=="valence",]


delay_emo_group <- delay_emo_mematt%>%
  select(`Participant Private ID`,Img,emo_rate,aff_type,hits,Response,group,zrt)%>%
  group_by(Img,aff_type)%>%
  mutate(z2=mean(emo_rate))%>%
  ungroup()

delay_emo_group_val <-delay_emo_group %>%
  filter(aff_type=="valence")%>%
  group_by(group)%>%
  mutate(group_scale_v = scale(z2))%>%
  ungroup()






delay_model4 <- glmer(hits ~ zv + (1+zv| `Participant Private ID`), family = binomial, data = delay_mem_att,control = glmerControl())
delay_mem_att_clean3 <- delay_mem_att %>%
  filter(!is.na(zv) & !is.na(hits))
# Create a data frame with predictions
delay_pred_data4 <- delay_mem_att_clean3 %>%
  # Create a new data frame for prediction with original values
  mutate(
    pred = predict(delay_model4, type = "response"),
    se = predict(delay_model4, type = "link", se.fit = TRUE)$se.fit
  )

# Calculate confidence intervals
delay_pred_data4 <- delay_pred_data3 %>%
  mutate(
    lwr = pred - 1.96 * se,
    upr = pred + 1.96 * se
  )
```

```{r include=F}
ggplot(delay_pred_data4, aes(x = zv, y = hits)) +
  geom_point() +
  geom_smooth(aes(y = pred, color = as.factor(`Participant Private ID`)),method="lm") + 
  geom_smooth(aes(y = pred), color = "black") + # Predicted line
  theme_ipsum(axis_title_just = "cc", axis_title_size = 12, axis_text_size = 9) +
  ylim(0, 1) +
  xlab("Valence") +
  ylab("HIT?") +
  labs(color = "Participant") +
  theme(legend.position = "none")+
  scale_color_viridis(option="A",discrete="True")+ 
  theme(plot.margin = margin(0, 0, 0, 0))+
  ggtitle("Memory prediction using VAMOS Scores (z-scored globally)") 




```

```{r,message=F,warning=F}
model_summary <- summary(delay_model4)

fixed_effects_table <- model_summary$coefficients

fixed_effects_table
```


<br>
<br>

## How does arousal relate to memory after a 24 hr delay?
```{r ,message=F,warning=F}
delay_bad_data <- delay_mem_att[delay_mem_att$`Participant Private ID` %in% delay_poor_mems,]

delay_ind_scale_ar <-delay_ind_scale_emo[delay_ind_scale_emo$aff_type=="arousal",]

delay_emo_group_ar <-delay_emo_group %>%
  filter(aff_type=="arousal")%>%
  group_by(group)%>%
  mutate(group_scale_ar = scale(z2))%>%
  ungroup()

delay_model6 <- glmer(hits ~ za + (1+za | `Participant Private ID`), family = binomial, data = delay_mem_att,control = glmerControl())
delay_mem_att_clean6 <- delay_mem_att %>%
  filter(!is.na(za) & !is.na(hits))
# Create a data frame with predictions
delay_pred_data6 <- delay_mem_att_clean6 %>%
  # Create a new data frame for prediction with original values
  mutate(
    pred = predict(delay_model6, type = "response"),
    se = predict(delay_model6, type = "link", se.fit = TRUE)$se.fit
  )

# Calculate confidence intervals
delay_pred_data6 <- delay_pred_data6 %>%
  mutate(
    lwr = pred - 1.96 * se,
    upr = pred + 1.96 * se
  )

```

```{r, include=F}
ggplot(delay_pred_data6, aes(x = za, y = hits)) +
  geom_point() +
  geom_line(aes(y = pred, color = as.factor(`Participant Private ID`)))+
  geom_smooth(method = "glm",aes(y = pred), color = "black") + # Predicted line # Confidence intervals
  theme_ipsum(axis_title_just = "cc", axis_title_size = 12, axis_text_size = 9) +
  ylim(0, 1) +
  xlab("Arousal") +
  ylab("HIT?") +
  labs(color = "Participant") +
  theme(legend.position = "none")+
  scale_color_viridis(option="A",discrete="True")+ 
  theme(plot.margin = margin(0, 0, 0, 0))+
  ggtitle("Memory prediction using VAMOS Scores 
          (z-scored globally)") 

```

```{r,message=F,warning=F}
model_summary <- summary(delay_model6)

fixed_effects_table <- model_summary$coefficients

fixed_effects_table
```

<br>
<br>

### Interactive Model
```{r ,message=F,warning=F}
delay_model11 <- glmer(hits ~ zrt * zv * za*z_mem + (1 +zrt+zv+za+z_mem| `Participant Private ID`), family = binomial, data = delay_mem_att, control = glmerControl())
summary(delay_model11)
```

```{r,message=F,warning=F}
model_summary <- summary(delay_model11)

fixed_effects_table <- model_summary$coefficients

fixed_effects_table
```




### How quickly are participants completing the memory task?

```{r}
delay_mem_rt <- delay_memory%>%
  select(`Participant Private ID`,Display,Response,`Reaction Time`,`Trial Number`)%>%
  group_by(`Participant Private ID`)%>%
  mutate(mean_rt = mean(`Reaction Time`))
delay_mem_rt1 <- delay_memory%>%
  select(`Participant Private ID`,Display,Response,`Reaction Time`,`Trial Number`)%>%
  filter(`Participant Private ID`<=11682081
)
delay_mem_rt2 <- delay_memory%>%
  select(`Participant Private ID`,Display,Response,`Reaction Time`,`Trial Number`)%>%
  filter(`Participant Private ID`> 11682081 &`Participant Private ID`<=11758428
)
delay_mem_rt3 <- delay_memory%>%
  select(`Participant Private ID`,Display,Response,`Reaction Time`,`Trial Number`)%>%
  filter(`Participant Private ID`> 11758428 &`Participant Private ID`<=11852219
)
delay_mem_rt4 <- delay_memory%>%
  select(`Participant Private ID`,Display,Response,`Reaction Time`,`Trial Number`)%>%
  filter(`Participant Private ID`> 11758428
)

delay_mem_rt1$`Participant Private ID`<- as.factor(delay_mem_rt1$`Participant Private ID`)
delay_mem_rt2$`Participant Private ID`<- as.factor(delay_mem_rt2$`Participant Private ID`)
delay_mem_rt3$`Participant Private ID`<- as.factor(delay_mem_rt3$`Participant Private ID`)
delay_mem_rt4$`Participant Private ID`<- as.factor(delay_mem_rt4$`Participant Private ID`)

delay_mem_rt$`Participant Private ID` <- as.factor(delay_mem_rt$`Participant Private ID`)
ggplot(delay_mem_rt, aes(x=`Participant Private ID`, y=mean_rt))+
  geom_point()+
  geom_hline(yintercept = 2380.765)+
  xlab("Participant")+
  labs(color = "Participant",
       title="Memory performance (Inclusive)")+
  theme(legend.position="none",
        axis.text.x = element_blank())



  delay_memory <-  delay_memory%>%
   group_by(`Participant Private ID`)%>%
   mutate(tot = length(Response))
 
 delay_memory$Response <-as.character(  delay_memory$Response)
  delay_memory$`Participant Private ID` <-as.factor( delay_memory$`Participant Private ID`)
# Stacked
ggplot(delay_memory, aes(fill=Response, y=tot, x=`Participant Private ID`)) + 
    geom_bar(position="stack", stat="identity")+
  ylim(0,10000)+
  xlab("Participant")+
  labs(color = "Participant",
       title="Memory performance (Inclusive)")+
  theme(legend.position="none",
        axis.text.x = element_blank())


# Step 1: Identify participants with a dominant response
filtered_participants <- delay_memory %>%
  group_by(`Participant Private ID`) %>%
  summarise(
    total_responses = n(),
    dominant_response = names(which.max(table(Response))),
    dominant_count = max(table(Response)),
    proportion = dominant_count / total_responses
  ) %>%
  filter(proportion > 0.8) %>%
  pull(`Participant Private ID`)

```